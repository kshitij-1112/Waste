`Views/LoanApplication/Application.cshtml`
```cshtml
@model BankLoanProject.Models.LoanApplicationViewModel
@{
    var role = Context.Session.GetString("Role");
}
<link rel="stylesheet" href="~/css/loan-application.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Dashboard Header -->
<div class="dashboard-header">
    <h1>
        <i class="fas fa-file-invoice-dollar me-3"></i>
        Loan Application Portal
    </h1>
</div>

<!-- Apply Button - Centered -->
@if (role == "Customer")
{
    <div class="apply-button-container">
        <button type="button" class="btn-apply" id="applyForLoanButton" data-bs-toggle="modal" data-bs-target="#loanApplicationModal">
            <i class="fas fa-plus-circle me-2"></i>Apply for Loan
        </button>
    </div>
}

<!-- Table Controls -->
<div class="table-controls">
    <div class="rows-control">
        <label for="rowsPerPage">
            <i class="fas fa-list-ol"></i>
            Rows per page:
        </label>
        <select id="rowsPerPage" class="form-select" onchange="changeRowsPerPage()">
            <option value="2" selected>2</option>
            <option value="5">5</option>
            <option value="10">10</option>
        </select>
    </div>
    <div class="controls-right">
        <div class="input-group search-input-group">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" class="form-control" id="searchInput" placeholder="Search applications..." oninput="searchApplications()">
        </div>
    </div>
</div>

<!-- Table Container -->
<div class="table-container">
    <div class="table-wrapper">
        <table class="table table-bordered">
            <thead>
                <tr class="application-row">
                    <th scope="col" class="col-app-id">App ID</th>
                    @if (role == "Admin")
                    {
                        <th scope="col" class="col-customer-id">Cust ID</th>
                        <th scope="col" class="col-name">Name</th>
                    }
                    <th scope="col" class="col-product-type">Product Type</th>
                    <th scope="col" class="col-product-name">Product Name</th>
                    <th scope="col" class="col-interest">Rate</th>
                    <th scope="col" class="col-tenure">Tenure</th>
                    <th scope="col" class="col-amount">Amount</th>
                    <th scope="col" class="col-date">Date</th>
                    <th scope="col" class="col-status">Status</th>
                    @if (role == "Admin")
                    {
                        <th scope="col" class="col-actions">Actions</th>
                    }
                </tr>
            </thead>
            <tbody id="applicationTableBody">
                @if (ViewBag.ApplicationList != null)
                {
                    @foreach (var app in ViewBag.ApplicationList)
                    {
                        <tr class="application-row">
                            <td class="text-center">@app.ApplicationId</td>
                            @if (role == "Admin")
                            {
                                <td class="text-center">@app.CustomerId</td>
                                <td><strong>@app.Name</strong></td>
                            }
                            <td>@app.ProductType</td>
                            <td>@app.ProductName</td>
                            <td class="text-center">@app.InterestRate?.ToString() %</td>
                            <td class="text-center">@app.LoanTenure months</td>
                            <td class="text-end">â‚¹@app.LoanAmount?.ToString("N0")</td>
                            <td class="text-center">@app.ApplicationDate?.ToString("dd-MM-yyyy")</td>
                            <td class="text-center">
                                @{
                                    string statusClass = "";
                                    string statusIcon = "";
                                    switch (app.ApprovalStatus?.ToLower())
                                    {
                                        case "approved":
                                            statusClass = "status-verified";
                                            statusIcon = "fas fa-check-circle";
                                            break;
                                        case "pending":
                                            statusClass = "status-pending";
                                            statusIcon = "fas fa-clock";
                                            break;
                                        case "rejected":
                                            statusClass = "status-rejected";
                                            statusIcon = "fas fa-times-circle";
                                            break;
                                        default:
                                            statusClass = "status-pending";
                                            statusIcon = "fas fa-clock";
                                            break;
                                    }
                                }
                                <span class="status-badge @statusClass">
                                    <i class="@statusIcon"></i>@app.ApprovalStatus
                                </span>
                            </td>
                            @if (role == "Admin")
                            {
                                <td class="text-center">
                                    <button type="button" class="btn-action btn-process @(app.ApprovalStatus == "APPROVED" || app.ApprovalStatus == "REJECTED" ? "disabled" : "")"
                                            data-id="@app.ApplicationId" data-bs-toggle="modal" data-bs-target="#processApplicationModal">
                                        <span>@(app.ApprovalStatus == "APPROVED" || app.ApprovalStatus == "REJECTED" ? "Processed" : "Process")</span>
                                    </button>
                                </td>
                            }
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="@(role == "Admin" ? "11" : "8")" class="text-center py-3">
                            <i class="fas fa-inbox me-2"></i>No applications found.
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Section -->
    <div class="pagination-section">
        <div class="pagination-info" id="paginationInfo">
            <!-- Pagination info will be generated by JavaScript -->
        </div>
        <nav aria-label="Application pagination">
            <ul class="pagination" id="paginationContainer">
                <!-- Pagination buttons will be generated by JavaScript -->
            </ul>
        </nav>
    </div>
</div>

<!-- Loan Application Modal -->
<div class="modal fade" id="loanApplicationModal" tabindex="-1" aria-labelledby="loanApplicationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <form id="loanApplicationForm" method="post" asp-action="ApplyForLoan" asp-controller="LoanApplication">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="loanModalLabel">
                        <i class="fas fa-file-signature me-2"></i>Loan Application Form
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <!-- Form content remains unchanged -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" name="submitType" value="Submit">
                        <i class="fas fa-check-circle me-2"></i>Submit Application
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Process Application Modal -->
<div class="modal fade" id="processApplicationModal" tabindex="-1" aria-labelledby="processApplicationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <!-- Modal content unchanged -->
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        let rowsPerPage = parseInt(document.getElementById('rowsPerPage')?.value || 10);
        let allRows = [];
        let filteredRows = [];

        // Maintain current pagination state after actions to prevent unwanted redirection
        function saveState() {
            sessionStorage.setItem('loanAppCurrentPage', currentPage);
            sessionStorage.setItem('loanAppRowsPerPage', rowsPerPage);
        }
        function restoreState() {
            const savedPage = sessionStorage.getItem('loanAppCurrentPage');
            const savedRows = sessionStorage.getItem('loanAppRowsPerPage');
            if(savedPage) currentPage = parseInt(savedPage);
            if(savedRows) {
                rowsPerPage = parseInt(savedRows);
                document.getElementById('rowsPerPage').value = rowsPerPage;
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            restoreState();
            initializeTable();

            const errorMessage = '@TempData["Error"]';
            if (errorMessage) {
                alert(errorMessage);
            }

            document.getElementById('rowsPerPage').addEventListener('change', changeRowsPerPage);
            document.getElementById('searchInput').addEventListener('input', searchApplications);

            // Hijack form submit or button clicks to save state before action
            $('#processApplicationModal, #loanApplicationModal').on('hide.bs.modal', function() {
                saveState(); // Save pagination info on modal close
            });
        });

        function initializeTable() {
            allRows = Array.from(document.querySelectorAll('.application-row'));
            applyFilters();
            updateTable();
        }

        function applyFilters() {
            let rows = [...allRows];
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            if (searchTerm !== '') {
                rows = rows.filter(row => row.textContent.toLowerCase().includes(searchTerm));
            }
            filteredRows = rows;
        }

        function updateTable() {
            allRows.forEach(row => (row.style.display = 'none'));
            const totalRows = filteredRows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage) || 1;

            // Clamp currentPage between 1 and totalPages after filtering
            if(currentPage > totalPages) currentPage = totalPages;

            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = Math.min(startIndex + rowsPerPage, totalRows);

            // Fix pagination off-by-one: display the exact number of entries requested if possible
            for (let i = startIndex; i < endIndex; i++) {
                if(filteredRows[i]) {
                    filteredRows[i].style.display = '';
                }
            }

            updatePagination(totalPages, totalRows, startIndex, endIndex);
            saveState();
        }

        function updatePagination(totalPages, totalRows, startIndex, endIndex) {
            const paginationContainer = document.getElementById('paginationContainer');
            const paginationInfo = document.getElementById('paginationInfo');
            paginationContainer.innerHTML = '';

            if (totalPages <= 1) {
                paginationContainer.appendChild(createBootstrapPaginationButton('1', 1, false, true));
            } else {
                paginationContainer.appendChild(createBootstrapPaginationButton('Â«', 1, currentPage === 1));
                paginationContainer.appendChild(createBootstrapPaginationButton('â€¹', currentPage - 1, currentPage === 1));

                const maxVisiblePages = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }

                for (let i = startPage; i <= endPage; i++) {
                    paginationContainer.appendChild(createBootstrapPaginationButton(i, i, false, i === currentPage));
                }

                paginationContainer.appendChild(createBootstrapPaginationButton('â€º', currentPage + 1, currentPage === totalPages));
                paginationContainer.appendChild(createBootstrapPaginationButton('Â»', totalPages, currentPage === totalPages));
            }

            if (totalRows > 0) {
                paginationInfo.innerHTML = `<i class="fas fa-info-circle"></i> Showing ${startIndex + 1} to ${endIndex} of ${totalRows} entries`;
            } else {
                paginationInfo.innerHTML = `<i class="fas fa-info-circle"></i> No matching records found`;
            }
        }

        function createBootstrapPaginationButton(text, page, disabled, active = false) {
            const li = document.createElement('li');
            li.className = `page-item ${active ? 'active' : ''} ${disabled ? 'disabled' : ''}`;
            const button = document.createElement('a');
            button.className = 'page-link';
            button.innerHTML = text;
            button.href = '#';
            if (!disabled) {
                button.onclick = (e) => {
                    e.preventDefault();
                    goToPage(page);
                };
            }
            li.appendChild(button);
            return li;
        }

        function goToPage(page) {
            currentPage = page;
            updateTable();
        }

        function changeRowsPerPage() {
            rowsPerPage = parseInt(document.getElementById('rowsPerPage').value);
            currentPage = 1; // Reset to first page
            updateTable();
        }

        function searchApplications() {
            currentPage = 1; // Reset to first page
            applyFilters();
            updateTable();
        }

        // Handle loading application detail modal
        $(document).on('click', '.btn-process', function () {
            const applicationId = $(this).data('id');
            $.ajax({
                url: '/LoanApplication/GetApplicationDetailsById',
                type: 'GET',
                data: { applicationId: applicationId },
                success: function (data) {
                    if (data) {
                        $('#processAppId').text(data.applicationId);
                        $('#processCustId').text(data.customerId);
                        $('#processName').text(data.name);
                        $('#processKycStatus').text(data.kycStatus);
                        $('#processIR').text(data.interestRate);
                        $('#processTenure').text(data.loanTenure + ' months');
                        $('#processProduct').text(data.productType);
                        $('#processProductName').text(data.productName);
                        $('#processLoanAmount').text('â‚¹' + data.loanAmount);
                        $('#processApplicationDate').text(data.applicationDate);
                        $('#processStatusText').text(data.approvalStatus);
                        $('#processStatus').val(data.approvalStatus);
                        $('#saveProcessStatusBtn').data('application-id', data.applicationId);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching application details:", error);
                    alert("Failed to load application details.");
                }
            });
        });

        // Save status updates without losing pagination state
        $('#saveProcessStatusBtn').on('click', function () {
            const applicationId = $(this).data('application-id');
            const newStatus = $('#processStatus').val();
            $.ajax({
                url: '/LoanApplication/UpdateStatus',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ applicationId: applicationId, status: newStatus }),
                success: function (response) {
                    alert(response.message);
                    setTimeout(function () {
                        // Reload the page but preserve pagination state
                        // Instead of full reload, reinitialize data here if possible
                        // For now, reload page and restore session state on load
                        location.reload();
                    }, 1000);
                }
            });
        });

        // Fetch product names based on selected product type dynamically
        $('#productTypeDropdown').change(function () {
            var selectedType = $(this).val();
            var productNameDropdown = $('#productNameDropdown');
            productNameDropdown.empty().append('<option value="">-- Loading... --</option>');
            if (selectedType) {
                $.getJSON('/LoanApplication/GetProductNamesByType', { productType: selectedType }, function (data) {
                    productNameDropdown.empty().append('<option value="">-- Select Product Name --</option>');
                    $.each(data, function (i, item) {
                        productNameDropdown.append($('<option>', {
                            value: item.value,
                            text: item.text
                        }));
                    });
                });
            } else {
                productNameDropdown.empty().append('<option value="">-- Select Product Name --</option>');
            }
        });
    </script>
}

```
