@model List<BankLoanProject.Models.RepaymentScheduleViewModel>
@{
    ViewBag.Title = "Admin Loan Scheduling";
}

<link rel="stylesheet" href="~/css/repayment.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<!-- Dashboard Header -->
<div class="dashboard-header">
    <h2>
        <i class="fas fa-calendar-check me-3"></i>
        Loan Scheduling Dashboard
    </h2>
    @* <p>Manage and schedule loan repayments for approved applications</p> *@
</div>

<!-- Table Controls -->
<div class="table-controls">
    <div class="rows-control">
        <label for="rowsPerPage">
            <i class="fas fa-list-ol"></i>
            Rows per page:
        </label>
        <select id="rowsPerPage" class="form-select" onchange="changeRowsPerPage()">
            <option value="2">2</option>
            <option value="5">5</option>
            <option value="10">10</option>
        </select>
    </div>

    <div class="controls-right">
        <div class="input-group search-input-group">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" class="form-control" id="searchInput" placeholder="Search loans..." oninput="searchLoans()">
        </div>
    </div>
</div>

<!-- Table -->
<div class="table-container">
    <div class="table-wrapper">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Customer ID</th>
                    <th scope="col">Name</th>
                    <th scope="col">Loan ID</th>
                    <th scope="col">Product Type</th>
                    <th scope="col">Product Name</th>
                    <th scope="col">Interest Rate (%)</th>
                    <th scope="col">Loan Amount</th>
                    <th scope="col">Tenure (Months)</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody id="table-body">
                @foreach (var loan in Model)
                {
                    <tr class="loan-row" data-loan-id="@loan.LoanId">
                        <td class="text-center"><strong>@loan.CustomerId</strong></td>
                        <td class="text-center"><strong>@loan.Name</strong></td>
                        <td class="text-center"><strong>@loan.LoanId</strong></td>
                        <td class="text-center"><strong>@loan.ProductType</strong></td>
                        <td class="text-center"><strong>@loan.ProductName</strong></td>
                        <td class="text-center"><span class="rate">@loan.InterestRate%</span></td>
                        <td class="text-center"><span class="amount">@loan.LoanAmount.ToString("C")</span></td>
                        <td class="text-center"><span class="tenure">@loan.LoanTenure months</span></td>
                        <td class="text-center">
                            <form asp-action="ScheduleLoan" asp-controller="Repayment" method="post" class="schedule-form">
                                <input type="hidden" name="applicationId" value="@loan.ApplicationId" />
                                <!-- Hidden inputs to preserve pagination state -->
                                <input type="hidden" name="currentPage" class="current-page-input" value="1" />
                                <input type="hidden" name="rowsPerPage" class="rows-per-page-input" value="2" />
                                <input type="hidden" name="searchTerm" class="search-term-input" value="" />
                                
                                <button type="submit" class="btn btn-schedule" data-application-id="@loan.ApplicationId">
                                    <i class="fas fa-calendar-plus me-1"></i>Schedule
                                </button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Section -->
    <div class="pagination-section">
        <div class="pagination-info" id="paginationInfo">
            <!-- Pagination info will be generated by JavaScript -->
        </div>
        <nav aria-label="Loan pagination">
            <ul class="pagination" id="paginationContainer">
                <!-- Pagination buttons will be generated by JavaScript -->
            </ul>
        </nav>
    </div>
</div>

@section Scripts {
    <script>
        // Global variables for pagination and search
        let currentPage = 1;
        let rowsPerPage = 2;
        let allRows = [];
        let filteredRows = [];
        let searchTerm = '';

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            restorePaginationState();
            initializeTable();
            initializeFormHandlers();
        });

        function restorePaginationState() {
            // Restore pagination state from URL parameters or localStorage
            const urlParams = new URLSearchParams(window.location.search);
            const savedPage = urlParams.get('currentPage') || localStorage.getItem('admin-currentPage') || '1';
            const savedRowsPerPage = urlParams.get('rowsPerPage') || localStorage.getItem('admin-rowsPerPage') || '2';
            const savedSearchTerm = urlParams.get('searchTerm') || localStorage.getItem('admin-searchTerm') || '';

            currentPage = parseInt(savedPage);
            rowsPerPage = parseInt(savedRowsPerPage);
            searchTerm = savedSearchTerm;

            // Update UI elements
            document.getElementById('rowsPerPage').value = rowsPerPage;
            document.getElementById('searchInput').value = searchTerm;
        }

        function savePaginationState() {
            // Save current state to localStorage
            localStorage.setItem('admin-currentPage', currentPage);
            localStorage.setItem('admin-rowsPerPage', rowsPerPage);
            localStorage.setItem('admin-searchTerm', searchTerm);
        }

        function initializeTable() {
            allRows = Array.from(document.querySelectorAll('.loan-row'));
            filteredRows = [...allRows];
            applyFilters();
            updateTable();
        }

        function initializeFormHandlers() {
            const forms = document.querySelectorAll('.schedule-form');

            forms.forEach(form => {
                form.addEventListener('submit', function(e) {
                    const button = form.querySelector('button[type="submit"]');
                    const applicationId = button.getAttribute('data-application-id');
                    
                    if (button && !button.disabled) {
                        // Save current pagination state before submission
                        savePaginationState();
                        
                        // Update hidden form inputs with current state
                        form.querySelector('.current-page-input').value = currentPage;
                        form.querySelector('.rows-per-page-input').value = rowsPerPage;
                        form.querySelector('.search-term-input').value = searchTerm;
                        
                        // Disable button and change text
                        button.disabled = true;
                        button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Scheduling...';
                        
                        // Store the scheduled state in localStorage for this specific application
                        localStorage.setItem(`scheduled-${applicationId}`, 'true');
                    }
                });
            });

            // Check for previously scheduled items and update their button states
            forms.forEach(form => {
                const button = form.querySelector('button[type="submit"]');
                const applicationId = button.getAttribute('data-application-id');
                
                if (localStorage.getItem(`scheduled-${applicationId}`) === 'true') {
                    button.disabled = true;
                    button.innerHTML = '<i class="fas fa-check-circle me-1"></i>Done';
                    button.classList.add('btn-scheduled');
                }
            });
        }

        function applyFilters() {
            let rows = [...allRows];

            // Apply search filter
            searchTerm = document.getElementById('searchInput').value.toLowerCase();
            if (searchTerm !== '') {
                rows = rows.filter(row => {
                    const text = row.textContent.toLowerCase();
                    return text.includes(searchTerm);
                });
            }

            filteredRows = rows;
        }

        function updateTable() {
            // Hide all rows first
            allRows.forEach(row => row.style.display = 'none');

            // Calculate pagination
            const totalRows = filteredRows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage) || 1;
            
            // Ensure currentPage is within valid range
            if (currentPage > totalPages) {
                currentPage = totalPages;
            }
            if (currentPage < 1) {
                currentPage = 1;
            }
            
            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = Math.min(startIndex + rowsPerPage, totalRows);

            // Show current page rows
            for (let i = startIndex; i < endIndex; i++) {
                if (filteredRows[i]) {
                    filteredRows[i].style.display = '';
                }
            }

            // Update pagination controls
            updatePagination(totalPages, totalRows, startIndex, endIndex);
            
            // Save current state
            savePaginationState();
        }

        function updatePagination(totalPages, totalRows, startIndex, endIndex) {
            const paginationContainer = document.getElementById('paginationContainer');
            const paginationInfo = document.getElementById('paginationInfo');

            // Clear existing pagination
            paginationContainer.innerHTML = '';

            if (totalPages <= 1) {
                const singleBtn = createBootstrapPaginationButton('1', 1, false, true);
                paginationContainer.appendChild(singleBtn);
            } else {
                // First page button
                const firstBtn = createBootstrapPaginationButton('«', 1, currentPage === 1);
                paginationContainer.appendChild(firstBtn);

                // Previous page button
                const prevBtn = createBootstrapPaginationButton('‹', currentPage - 1, currentPage === 1);
                paginationContainer.appendChild(prevBtn);

                // Page number buttons
                const maxVisiblePages = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }

                for (let i = startPage; i <= endPage; i++) {
                    const pageBtn = createBootstrapPaginationButton(i, i, false, i === currentPage);
                    paginationContainer.appendChild(pageBtn);
                }

                // Next page button
                const nextBtn = createBootstrapPaginationButton('›', currentPage + 1, currentPage === totalPages);
                paginationContainer.appendChild(nextBtn);

                // Last page button
                const lastBtn = createBootstrapPaginationButton('»', totalPages, currentPage === totalPages);
                paginationContainer.appendChild(lastBtn);
            }

            // Update pagination info
            if (totalRows > 0) {
                paginationInfo.innerHTML = `
                    <i class="fas fa-info-circle"></i>
                    Showing ${startIndex + 1} to ${endIndex} of ${totalRows} entries
                `;
            } else {
                paginationInfo.innerHTML = `
                    <i class="fas fa-info-circle"></i>
                    No matching records found
                `;
            }
        }

        function createBootstrapPaginationButton(text, page, disabled, active = false) {
            const li = document.createElement('li');
            li.className = `page-item ${active ? 'active' : ''} ${disabled ? 'disabled' : ''}`;

            const button = document.createElement('a');
            button.className = 'page-link';
            button.innerHTML = text;
            button.href = '#';

            if (!disabled) {
                button.onclick = (e) => {
                    e.preventDefault();
                    goToPage(page);
                };
            }

            li.appendChild(button);
            return li;
        }

        function goToPage(page) {
            currentPage = page;
            updateTable();
        }

        function changeRowsPerPage() {
            rowsPerPage = parseInt(document.getElementById('rowsPerPage').value);
            currentPage = 1;
            updateTable();
        }

        function searchLoans() {
            currentPage = 1;
            applyFilters();
            updateTable();
        }

        // Handle browser back/forward buttons
        window.addEventListener('popstate', function(event) {
            restorePaginationState();
            applyFilters();
            updateTable();
        });
    </script>
}
