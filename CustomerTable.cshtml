@model IEnumerable<BankLoanProject.Models.Entities.Customer>
<link rel="stylesheet" href="~/css/admindashboard.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Dashboard Header -->
<div class="dashboard-header">
    <h1>
        <i class="fas fa-user-shield me-3"></i>
        Customer Management Dashboard
    </h1>
    @* <p>Manage customer registrations and KYC verification</p> *@
</div>

<!-- Table Controls -->
<div class="table-controls">
    <div class="rows-control">
        <label for="rowsPerPage">
            <i class="fas fa-list-ol"></i>
            Rows per page:
        </label>
        <select id="rowsPerPage" class="form-select" onchange="changeRowsPerPage()">
            <option value="2">2</option>
            <option value="5">5</option>
            <option value="10">10</option>
        </select>
    </div>

    <div class="controls-right">
        <!-- Bootstrap Search -->
        <div class="input-group search-input-group">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" class="form-control" id="searchInput" placeholder="Search customers..." oninput="searchCustomers()">
        </div>
    </div>
</div>

<!-- Table Container -->
<div class="table-container">
    <div class="table-wrapper">
        <table class="table">
            <thead>
                <tr>
                    <th>Customer ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Address</th>
                    <th>Documents</th>
                    <th>KYC Status</th>
                    <th class="actions-column">Actions</th>
                </tr>
            </thead>
            <tbody id="customerTableBody">
                @foreach (var customer in Model)
                {
                    <tr class="customer-row" data-customer-id="@customer.CustomerId" data-original-id="@customer.CustomerId" data-kyc-status="@customer.KycStatus.ToLower()">
                        <td><span class="customer-id">#@customer.CustomerId</span></td>
                        <td><strong>@customer.Name</strong></td>
                        <td>@customer.Email</td>
                        <td>@customer.Address</td>
                        <td>
                            <a href="@customer.DocumentPath" target="_blank" class="document-link">
                                documents/@(customer.Name.ToLower().Replace(" ", "_"))_kyc.pdf
                            </a>
                        </td>
                        <td>
                            @if (customer.KycStatus == "Approved" || customer.KycStatus == "Verified")
                            {
                                <span class="status-badge status-verified">
                                    <i class="fas fa-check-circle"></i> Verified
                                </span>
                            }
                            else
                            {
                                <span class="status-badge status-pending">
                                    <i class="fas fa-clock"></i> @customer.KycStatus
                                </span>
                            }
                        </td>
                        <td class="actions-cell">
                            <div class="action-buttons">
                                <button class="btn-action btn-edit" onclick="openEditModal(@customer.CustomerId, '@customer.KycStatus')">
                                    <i class="fas fa-edit"></i>
                                    <span>Edit</span>
                                </button>
                                <form asp-action="Delete" method="post" style="display:inline;" onsubmit="handleFormSubmit(event)">
                                    <input type="hidden" name="id" value="@customer.CustomerId" />
                                    <input type="hidden" name="currentPage" id="deleteCurrentPage_@customer.CustomerId" value="1" />
                                    <input type="hidden" name="rowsPerPage" id="deleteRowsPerPage_@customer.CustomerId" value="2" />
                                    <input type="hidden" name="searchTerm" id="deleteSearchTerm_@customer.CustomerId" value="" />
                                    <button type="submit" class="btn-action btn-delete"
                                            onclick="return confirm('Are you sure you want to delete this customer?');">
                                        <i class="fas fa-trash-alt"></i>
                                        <span>Delete</span>
                                    </button>
                                </form>
                                <form asp-action="Verify" method="post" style="display:inline;" onsubmit="handleFormSubmit(event)">
                                    <input type="hidden" name="id" value="@customer.CustomerId" />
                                    <input type="hidden" name="currentPage" id="verifyCurrentPage_@customer.CustomerId" value="1" />
                                    <input type="hidden" name="rowsPerPage" id="verifyRowsPerPage_@customer.CustomerId" value="2" />
                                    <input type="hidden" name="searchTerm" id="verifySearchTerm_@customer.CustomerId" value="" />
                                    <button type="submit" class="btn-action btn-verify">
                                        <i class="fas fa-user-check"></i>
                                        <span>Verify</span>
                                    </button>
                                </form>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Section -->
    <div class="pagination-section">
        <div class="pagination-info" id="paginationInfo">
            <!-- Pagination info will be generated by JavaScript -->
        </div>
        <nav aria-label="Disbursement pagination">
            <ul class="pagination" id="paginationContainer">
                <!-- Pagination buttons will be generated by JavaScript -->
            </ul>
        </nav>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">
                    <i class="fas fa-edit"></i> Edit Customer
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="editModalBody">
                <!-- Form will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Global variables for pagination and search
        let currentPage = 1;
        let rowsPerPage = 2; // Default
        let allRows = [];
        let filteredRows = [];
        let currentScrollPosition = 0;
        let tableHeight = 0;
        let isInitialized = false;

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Small delay to ensure DOM is fully loaded
            setTimeout(() => {
                restoreSavedState();
                initializeTable();
                isInitialized = true;
            }, 100);
        });

        function restoreSavedState() {
            // Get URL parameters first (for post-redirect scenarios)
            const urlParams = new URLSearchParams(window.location.search);
            const urlCurrentPage = urlParams.get('currentPage');
            const urlRowsPerPage = urlParams.get('rowsPerPage');
            const urlSearchTerm = urlParams.get('searchTerm');

            // Restore from URL parameters if available, otherwise from storage
            const savedRowsPerPage = urlRowsPerPage || sessionStorage.getItem('rowsPerPage') || localStorage.getItem('rowsPerPage');
            const savedCurrentPage = urlCurrentPage || sessionStorage.getItem('currentPage') || localStorage.getItem('currentPage');
            const savedSearchTerm = urlSearchTerm || sessionStorage.getItem('searchTerm') || localStorage.getItem('searchTerm');

            if (savedRowsPerPage) {
                rowsPerPage = parseInt(savedRowsPerPage);
                document.getElementById('rowsPerPage').value = rowsPerPage;
            }

            if (savedCurrentPage) {
                currentPage = parseInt(savedCurrentPage);
            }

            if (savedSearchTerm) {
                document.getElementById('searchInput').value = savedSearchTerm;
            }

            // Clear URL parameters after restoring state
            if (urlCurrentPage || urlRowsPerPage || urlSearchTerm) {
                const newUrl = window.location.pathname;
                window.history.replaceState({}, document.title, newUrl);
            }
        }

        function saveCurrentState() {
            // Save to both sessionStorage and localStorage for persistence
            sessionStorage.setItem('rowsPerPage', rowsPerPage);
            sessionStorage.setItem('currentPage', currentPage);
            sessionStorage.setItem('searchTerm', document.getElementById('searchInput').value);

            localStorage.setItem('rowsPerPage', rowsPerPage);
            localStorage.setItem('currentPage', currentPage);
            localStorage.setItem('searchTerm', document.getElementById('searchInput').value);

            // Update all form hidden inputs
            updateFormHiddenInputs();
        }

        function updateFormHiddenInputs() {
            const searchTerm = document.getElementById('searchInput').value;
            
            // Update all delete form hidden inputs
            document.querySelectorAll('[id^="deleteCurrentPage_"]').forEach(input => {
                input.value = currentPage;
            });
            document.querySelectorAll('[id^="deleteRowsPerPage_"]').forEach(input => {
                input.value = rowsPerPage;
            });
            document.querySelectorAll('[id^="deleteSearchTerm_"]').forEach(input => {
                input.value = searchTerm;
            });

            // Update all verify form hidden inputs
            document.querySelectorAll('[id^="verifyCurrentPage_"]').forEach(input => {
                input.value = currentPage;
            });
            document.querySelectorAll('[id^="verifyRowsPerPage_"]').forEach(input => {
                input.value = rowsPerPage;
            });
            document.querySelectorAll('[id^="verifySearchTerm_"]').forEach(input => {
                input.value = searchTerm;
            });
        }

        function initializeTable() {
            allRows = Array.from(document.querySelectorAll('.customer-row'));
            console.log('Total rows found:', allRows.length);
            applyFilters();
            updateTable();
        }

        function applyFilters() {
            let rows = [...allRows];

            // Apply search filter
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            if (searchTerm !== '') {
                rows = rows.filter(row => {
                    const text = row.textContent.toLowerCase();
                    return text.includes(searchTerm);
                });
            }

            filteredRows = rows;
            console.log('Filtered rows:', filteredRows.length);
        }

        function updateTable() {
            if (!isInitialized) return;

            // Save current scroll position
            currentScrollPosition = window.pageYOffset || document.documentElement.scrollTop;

            // Hide all rows first
            allRows.forEach(row => row.style.display = 'none');

            // Calculate pagination
            const totalRows = filteredRows.length;
            const totalPages = Math.ceil(totalRows / rowsPerPage) || 1;
            
            // Ensure currentPage is within valid range
            if (currentPage > totalPages) {
                currentPage = totalPages;
            }
            if (currentPage < 1) {
                currentPage = 1;
            }

            const startIndex = (currentPage - 1) * rowsPerPage;
            const endIndex = Math.min(startIndex + rowsPerPage, totalRows);

            console.log(`Page ${currentPage}: showing rows ${startIndex + 1} to ${endIndex} of ${totalRows} (${rowsPerPage} per page)`);

            // Show current page rows
            for (let i = startIndex; i < endIndex; i++) {
                if (filteredRows[i]) {
                    filteredRows[i].style.display = '';
                    console.log(`Showing row ${i + 1}:`, filteredRows[i]);
                }
            }

            // Update pagination controls
            updatePagination(totalPages, totalRows, startIndex, endIndex);

            // Save current state
            saveCurrentState();

            // Restore scroll position
            setTimeout(() => {
                window.scrollTo(0, currentScrollPosition);
            }, 10);
        }

        function updatePagination(totalPages, totalRows, startIndex, endIndex) {
            const paginationContainer = document.getElementById('paginationContainer');
            const paginationInfo = document.getElementById('paginationInfo');

            // Clear existing pagination
            paginationContainer.innerHTML = '';

            if (totalPages <= 1) {
                // Show single page button when only one page
                const singleBtn = createBootstrapPaginationButton('1', 1, false, true);
                paginationContainer.appendChild(singleBtn);
            } else {
                // First page button
                const firstBtn = createBootstrapPaginationButton('«', 1, currentPage === 1);
                paginationContainer.appendChild(firstBtn);

                // Previous page button
                const prevBtn = createBootstrapPaginationButton('‹', currentPage - 1, currentPage === 1);
                paginationContainer.appendChild(prevBtn);

                // Page number buttons
                const maxVisiblePages = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }

                for (let i = startPage; i <= endPage; i++) {
                    const pageBtn = createBootstrapPaginationButton(i, i, false, i === currentPage);
                    paginationContainer.appendChild(pageBtn);
                }

                // Next page button
                const nextBtn = createBootstrapPaginationButton('›', currentPage + 1, currentPage === totalPages);
                paginationContainer.appendChild(nextBtn);

                // Last page button
                const lastBtn = createBootstrapPaginationButton('»', totalPages, currentPage === totalPages);
                paginationContainer.appendChild(lastBtn);
            }

            // Update pagination info
            if (totalRows > 0) {
                paginationInfo.innerHTML = `
                    <i class="fas fa-info-circle"></i>
                    Showing ${startIndex + 1} to ${endIndex} of ${totalRows} entries
                `;
            } else {
                paginationInfo.innerHTML = `
                    <i class="fas fa-info-circle"></i>
                    No matching records found
                `;
            }
        }

        function createBootstrapPaginationButton(text, page, disabled, active = false) {
            const li = document.createElement('li');
            li.className = `page-item ${active ? 'active' : ''} ${disabled ? 'disabled' : ''}`;

            const button = document.createElement('a');
            button.className = 'page-link';
            button.innerHTML = text;
            button.href = '#';

            if (!disabled) {
                button.onclick = (e) => {
                    e.preventDefault();
                    goToPage(page);
                };
            }

            li.appendChild(button);
            return li;
        }

        function goToPage(page) {
            currentPage = page;
            updateTable();
        }

        function changeRowsPerPage() {
            rowsPerPage = parseInt(document.getElementById('rowsPerPage').value);
            currentPage = 1; // Reset to first page when changing rows per page
            updateTable();
        }

        function searchCustomers() {
            currentPage = 1; // Reset to first page when searching
            applyFilters();
            updateTable();
        }

        function refreshData() {
            const refreshBtn = document.querySelector('.btn-refresh i');
            if (refreshBtn) {
                refreshBtn.classList.add('fa-spin');
            }

            // Clear search
            document.getElementById('searchInput').value = '';

            // Reset to original data
            currentPage = 1;
            applyFilters();

            setTimeout(() => {
                updateTable();
                if (refreshBtn) {
                    refreshBtn.classList.remove('fa-spin');
                }
            }, 800);
        }

        function openEditModal(id, kycStatus) {
            $.get('/Customer/Edit/' + id, function (data) {
                $('#editModalBody').html(data);

                // Set the KYC status in the dropdown to match the customer's current status
                setTimeout(() => {
                    const kycSelect = document.querySelector('#editForm select[name="KycStatus"]');
                    if (kycSelect) {
                        // Normalize the status - if it's "Approved", set it to "Verified"
                        const normalizedStatus = (kycStatus === "Approved") ? "Verified" : kycStatus;
                        kycSelect.value = normalizedStatus;
                    }
                }, 100);

                $('#editModal').modal('show');
            });
        }

        // Handle form submissions to prevent page scroll and maintain state
        function handleFormSubmit(event) {
            // Save current scroll position and state before form submission
            currentScrollPosition = window.pageYOffset || document.documentElement.scrollTop;
            saveCurrentState();
            sessionStorage.setItem('scrollPosition', currentScrollPosition);

            // Update the form's hidden inputs with current state
            const form = event.target;
            const currentPageInput = form.querySelector('input[name="currentPage"]');
            const rowsPerPageInput = form.querySelector('input[name="rowsPerPage"]');
            const searchTermInput = form.querySelector('input[name="searchTerm"]');

            if (currentPageInput) currentPageInput.value = currentPage;
            if (rowsPerPageInput) rowsPerPageInput.value = rowsPerPage;
            if (searchTermInput) searchTermInput.value = document.getElementById('searchInput').value;
        }

        // Restore state after page reload
        window.addEventListener('load', function() {
            const savedScrollPosition = sessionStorage.getItem('scrollPosition');

            if (savedScrollPosition) {
                setTimeout(() => {
                    window.scrollTo(0, parseInt(savedScrollPosition));
                    // Clear saved scroll position
                    sessionStorage.removeItem('scrollPosition');
                }, 100);
            }
        });
    </script>
}
