@model List<BankLoanProject.Models.OutstandingReportViewModel>
@{
    var role = Context.Session.GetString("Role");
    Layout = null;
}

<!-- Outstanding Report Section -->
<div id="outstanding" class="report-section table-container">
    <div class="section-header">
        <div class="section-info">
            @* <span class="badge bg-warning mb-2">Outstanding Reports</span> *@
            <h4 class="mb-2">
                <i class="fas fa-money-bill-wave me-2"></i>
                Outstanding Loans Report
            </h4>
            @* <p class="text-muted">Track outstanding loan balances and payment status.</p> *@
        </div>
        <div class="export-filter-controls">
            <button class="btn btn-export" id="btnExport">
                <i class="fas fa-file-pdf"></i> Export PDF
            </button>
            <!-- Filter Dropdown -->
            <div class="dropdown">
                <button class="btn btn-filter dropdown-toggle" type="button" data-bs-toggle="dropdown">
                    <i class="fas fa-filter"></i> Filter
                </button>
                <div class="dropdown-menu p-3">
                    <label class="fw-bold">By Loan Type:</label>
                    <select id="loanTypeFilter" class="form-control mb-2">
                        <option value="">All</option>
                        <option value="Home">Home</option>
                        <option value="Vehicle">Vehicle</option>
                        <option value="Personal">Personal</option>
                    </select>

                    <button class="btn btn-success mt-2 w-100" id="btnApplyFilter">Apply</button>
                    <button class="btn btn-danger mt-2 w-100" id="btnClearFilter">Clear</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Table Controls - Added to match Repayment.pdf -->
    <div class="table-controls">
        <div class="rows-control">
            <label for="outstandingRowsPerPage">
                <i class="fas fa-list-ol"></i>
                Rows per page:
            </label>
            <select id="outstandingRowsPerPage" class="form-select" onchange="changeRowsPerPage()">
                <option value="2">2</option>
                <option value="5">5</option>
                <option value="10" selected>10</option>
            </select>
        </div>

        <div class="controls-right">
            <div class="input-group search-input-group">
                <span class="input-group-text">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" class="form-control" id="outstandingSearchInput" placeholder="Search outstanding..." oninput="searchOutstanding()">
            </div>
        </div>
    </div>

    <div class="table-wrapper">
        <table class="table table-bordered" id="outstandingReportTable">
            <thead>
                <tr>
                    <th scope="col" class="col-loan-id">Loan ID</th>
                    @if (role == "Admin")
                    {
                        <th scope="col" class="col-customer-id">Customer ID</th>
                        <th scope="col" class="col-customer-name">Customer Name</th>
                    }
                    <th scope="col" class="col-product-type">Product Type</th>
                    <th scope="col" class="col-product-name">Product Name</th>
                    <th scope="col" class="col-loan-amount">Loan Amount</th>
                    <th scope="col" class="col-outstanding-balance">Outstanding Balance</th>
                    <th scope="col" class="col-paid-amount">Paid Amount</th>
                </tr>
            </thead>
            <tbody class="report-table-body">
                @foreach (var report in Model)
                {
                    <tr class="report-row">
                        <td class="text-center"><strong>@report.LoanId</strong></td>
                        @if (role == "Admin")
                        {
                            <td class="text-center">@report.CustomerId</td>
                            <td class="text-center"><strong>@report.CustomerName</strong></td>
                        }
                        <td class="text-center">@report.ProductType</td>
                        <td class="text-center">@report.ProductName</td>
                        <td class="text-center"><span class="amount">@report.LoanAmount.ToString("C")</span></td>
                        <td class="text-center"><span class="amount">@report.OutstandingBalance.ToString("C")</span></td>
                        <td class="text-center"><span class="amount">@report.PaidAmount.ToString("C")</span></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Section -->
    <div class="pagination-section">
        <div class="pagination-info" id="outstandingPaginationInfo">
            <!-- Pagination info will be generated by JavaScript -->
        </div>
        <nav aria-label="Outstanding report pagination">
            <ul class="pagination" id="outstandingPaginationContainer">
                <!-- Pagination buttons will be generated by JavaScript -->
            </ul>
        </nav>
    </div>
</div>

<script>
    $(document).ready(function () {
        // Initialize pagination
        setTimeout(initializePagination, 100);

        // Export Table as PDF
        $("#btnExport").click(function () {
            exportToPDF('outstandingReportTable', 'Outstanding_Loans_Report');
        });

        // Apply Filters
        $("#btnApplyFilter").click(function () {
            applyFilters();
        });

        // Clear Filters
        $("#btnClearFilter").click(function () {
            clearFilters();
        });
    });

    // Global variables for pagination
    let currentPage = 1;
    let rowsPerPage = 10; // Default rows per page
    let allRows = [];
    let filteredRows = [];
    let searchTerm = '';

    function initializePagination() {
        allRows = Array.from(document.querySelectorAll('.report-row'));
        filteredRows = [...allRows];
        updateTable();
    }

    function changeRowsPerPage() {
        rowsPerPage = parseInt(document.getElementById('outstandingRowsPerPage').value);
        currentPage = 1;
        updateTable();
    }

    function searchOutstanding() {
        searchTerm = document.getElementById('outstandingSearchInput').value.toLowerCase();
        currentPage = 1;
        applyFilters();
    }

    function applyFilters() {
        let selectedLoanType = $("#loanTypeFilter").val().toLowerCase();

        filteredRows = allRows.filter(row => {
            const cells = row.querySelectorAll('td');
            const role = '@role';
            let loanType;

            if (role === "Admin") {
                loanType = cells[3].textContent.trim().toLowerCase();
            } else {
                loanType = cells[1].textContent.trim().toLowerCase();
            }

            let showRow = true;

            // Apply search filter
            if (searchTerm !== '') {
                const text = row.textContent.toLowerCase();
                if (!text.includes(searchTerm)) {
                    showRow = false;
                }
            }

            // Apply dropdown filters
            if (selectedLoanType && loanType !== selectedLoanType) {
                showRow = false;
            }

            return showRow;
        });

        currentPage = 1;
        updateTable();
    }

    function clearFilters() {
        $("#loanTypeFilter").val("");
        document.getElementById('outstandingSearchInput').value = '';
        searchTerm = '';

        filteredRows = [...allRows];
        currentPage = 1;
        updateTable();
    }

    function updateTable() {
        // Hide all rows first
        allRows.forEach(row => row.style.display = 'none');

        // Calculate pagination
        const totalRows = filteredRows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage) || 1;
        
        // Ensure currentPage is within valid range
        if (currentPage > totalPages) {
            currentPage = totalPages;
        }
        if (currentPage < 1) {
            currentPage = 1;
        }
        
        const startIndex = (currentPage - 1) * rowsPerPage;
        const endIndex = Math.min(startIndex + rowsPerPage, totalRows);

        // Show current page rows
        for (let i = startIndex; i < endIndex; i++) {
            if (filteredRows[i]) {
                filteredRows[i].style.display = '';
            }
        }

        // Update pagination controls
        updatePagination(totalPages, totalRows, startIndex, endIndex);
    }

    function updatePagination(totalPages, totalRows, startIndex, endIndex) {
        const paginationContainer = document.getElementById('outstandingPaginationContainer');
        const paginationInfo = document.getElementById('outstandingPaginationInfo');

        // Clear existing pagination
        paginationContainer.innerHTML = '';

        if (totalPages <= 1) {
            const singleBtn = createBootstrapPaginationButton('1', 1, false, true);
            paginationContainer.appendChild(singleBtn);
        } else {
            // First page button
            const firstBtn = createBootstrapPaginationButton('«', 1, currentPage === 1);
            paginationContainer.appendChild(firstBtn);

            // Previous page button
            const prevBtn = createBootstrapPaginationButton('‹', currentPage - 1, currentPage === 1);
            paginationContainer.appendChild(prevBtn);

            // Page number buttons
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            for (let i = startPage; i <= endPage; i++) {
                const pageBtn = createBootstrapPaginationButton(i, i, false, i === currentPage);
                paginationContainer.appendChild(pageBtn);
            }

            // Next page button
            const nextBtn = createBootstrapPaginationButton('›', currentPage + 1, currentPage === totalPages);
            paginationContainer.appendChild(nextBtn);

            // Last page button
            const lastBtn = createBootstrapPaginationButton('»', totalPages, currentPage === totalPages);
            paginationContainer.appendChild(lastBtn);
        }

        // Update pagination info
        if (totalRows > 0) {
            paginationInfo.innerHTML = `
                <i class="fas fa-info-circle"></i>
                Showing ${startIndex + 1} to ${endIndex} of ${totalRows} entries
            `;
        } else {
            paginationInfo.innerHTML = `
                <i class="fas fa-info-circle"></i>
                No matching records found
            `;
        }
    }

    function createBootstrapPaginationButton(text, page, disabled, active = false) {
        const li = document.createElement('li');
        li.className = `page-item ${active ? 'active' : ''} ${disabled ? 'disabled' : ''}`;

        const button = document.createElement('a');
        button.className = 'page-link';
        button.innerHTML = text;
        button.href = '#';

        if (!disabled) {
            button.onclick = (e) => {
                e.preventDefault();
                goToPage(page);
            };
        }

        li.appendChild(button);
        return li;
    }

    function goToPage(page) {
        currentPage = page;
        updateTable();
    }

    function exportToPDF(tableId, filename) {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        // Add title
        doc.setFontSize(16);
        doc.text('Outstanding Loans Report', 14, 15);

        // Add date
        doc.setFontSize(10);
        doc.text('Generated on: ' + new Date().toLocaleDateString(), 14, 25);

        // Get table data
        const table = document.getElementById(tableId);
        const headers = [];
        const data = [];

        // Extract headers
        table.querySelectorAll('thead th').forEach(th => {
            headers.push(th.textContent.trim());
        });

        // Extract visible rows data
        table.querySelectorAll('tbody tr').forEach(tr => {
            if (tr.style.display !== 'none') {
                const row = [];
                tr.querySelectorAll('td').forEach(td => {
                    row.push(td.textContent.trim());
                });
                data.push(row);
            }
        });

        // Generate table
        doc.autoTable({
            head: [headers],
            body: data,
            startY: 35,
            styles: {
                fontSize: 8,
                cellPadding: 2
            },
            headStyles: {
                fillColor: [44, 62, 80],
                textColor: 255
            }
        });

        // Save the PDF
        const timestamp = new Date().toISOString().replace(/[-:.]/g, "");
        doc.save(`${filename}_${timestamp}.pdf`);
    }
</script>
